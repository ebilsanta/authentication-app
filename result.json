{"errors": [], "paths": {"scanned": [".github/scripts/create_issue.py", ".github/workflows/semgrep.yml", ".gitignore", "README.md", "backend/.env", "backend/app.js", "backend/controllers/hostedLoginController.js", "backend/middlewares/hostedLoginMiddleware.js", "backend/package-lock.json", "backend/package.json", "backend/routes/hostedLoginRoutes.js", "backend/utils/dpopUtils.js", "backend/utils/pkceUtils.js", "pants.toml"]}, "results": [{"check_id": "javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage", "end": {"col": 22, "line": 4, "offset": 127}, "extra": {"engine_kind": "OSS", "fingerprint": "3c502de47112222e4a0a216268ced7c3ff77cc75edae6db05e4f0bdaeb22ecfafac691cdf882b8c99bbbf3e462eded640af06546056f6468d1d151a6b88e9c4e_0", "is_ignored": false, "lines": "const app = express();", "message": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://www.npmjs.com/package/csurf", "https://www.npmjs.com/package/csrf", "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "wdUKEq", "url": "https://semgrep.dev/playground/r/O9TyOQ/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage", "version_id": "O9TyOQ"}}, "shortlink": "https://sg.run/BxzR", "source": "https://semgrep.dev/r/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage", "subcategory": ["audit"], "technology": ["javascript", "typescript", "express"], "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]}, "metavars": {"$APP": {"abstract_content": "app", "end": {"col": 10, "line": 4, "offset": 115}, "start": {"col": 7, "line": 4, "offset": 112}}, "$EXPRESS": {"abstract_content": "express", "end": {"col": 20, "line": 4, "offset": 125}, "start": {"col": 13, "line": 4, "offset": 118}}}, "severity": "INFO", "validation_state": "NO_VALIDATOR"}, "path": "backend/app.js", "start": {"col": 7, "line": 4, "offset": 112}}, {"check_id": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name", "end": {"col": 3, "line": 12, "offset": 315}, "extra": {"engine_kind": "OSS", "fingerprint": "951dbf64ea73827d00047cda19992332e09c164869c780f9f2003907e5337dd647a813d8316f4643e501b6831eee954de60defac3dacf17224650c04b80bab01_0", "is_ignored": false, "lines": "app.use(session({\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: true\n}))", "message": "Don\u2019t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-522: Insufficiently Protected Credentials"], "cwe2021-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "eqU8k2", "url": "https://semgrep.dev/playground/r/vdT2Nd/javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name", "version_id": "vdT2Nd"}}, "shortlink": "https://sg.run/1Z5x", "source": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name", "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {"$SESSION": {"abstract_content": "session", "end": {"col": 16, "line": 8, "offset": 229}, "start": {"col": 9, "line": 8, "offset": 222}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "backend/app.js", "start": {"col": 9, "line": 8, "offset": 222}}, {"check_id": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain", "end": {"col": 3, "line": 12, "offset": 315}, "extra": {"engine_kind": "OSS", "fingerprint": "1348efc09f6dfad689c08977ce51f2a227edf40bd59926c63589675c0048f25d213c1da3f2ba05223cf6e9d33115b7134b4a0773a0eccc41408403ce543dce11_0", "is_ignored": false, "lines": "app.use(session({\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: true\n}))", "message": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-522: Insufficiently Protected Credentials"], "cwe2021-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ZqU5Pn", "url": "https://semgrep.dev/playground/r/nWT7Pd/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain", "version_id": "nWT7Pd"}}, "shortlink": "https://sg.run/rd41", "source": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain", "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {"$SESSION": {"abstract_content": "session", "end": {"col": 16, "line": 8, "offset": 229}, "start": {"col": 9, "line": 8, "offset": 222}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "backend/app.js", "start": {"col": 9, "line": 8, "offset": 222}}, {"check_id": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires", "end": {"col": 3, "line": 12, "offset": 315}, "extra": {"engine_kind": "OSS", "fingerprint": "e8931804a54684ce2e3192dd451504e07db464cb1bc85bfc75d133b54b116d9744bd935b8b5f83a7d857af36a279276754589faaefeb62d1c5e39ce05a959fce_0", "is_ignored": false, "lines": "app.use(session({\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: true\n}))", "message": "Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-522: Insufficiently Protected Credentials"], "cwe2021-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "EwU2DZ", "url": "https://semgrep.dev/playground/r/7ZTOoJ/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires", "version_id": "7ZTOoJ"}}, "shortlink": "https://sg.run/N4eG", "source": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires", "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {"$SESSION": {"abstract_content": "session", "end": {"col": 16, "line": 8, "offset": 229}, "start": {"col": 9, "line": 8, "offset": 222}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "backend/app.js", "start": {"col": 9, "line": 8, "offset": 222}}, {"check_id": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly", "end": {"col": 3, "line": 12, "offset": 315}, "extra": {"engine_kind": "OSS", "fingerprint": "ef838c2f3927c95df9fbe49baa9b061c1c023a0c1bc1724126dd8eb806ef3996180f14314beff6ca78dddc140800487b9e1ee5513acd770e0ff7edb05bbaab0f_0", "is_ignored": false, "lines": "app.use(session({\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: true\n}))", "message": "Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-522: Insufficiently Protected Credentials"], "cwe2021-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "d8UjGo", "url": "https://semgrep.dev/playground/r/ZRTwNy/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly", "version_id": "ZRTwNy"}}, "shortlink": "https://sg.run/ydBO", "source": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly", "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {"$SESSION": {"abstract_content": "session", "end": {"col": 16, "line": 8, "offset": 229}, "start": {"col": 9, "line": 8, "offset": 222}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "backend/app.js", "start": {"col": 9, "line": 8, "offset": 222}}, {"check_id": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path", "end": {"col": 3, "line": 12, "offset": 315}, "extra": {"engine_kind": "OSS", "fingerprint": "f0cc05521a4a7bc53472a2040d7b60735bc349f83b909f3dc24a5a1171c694b727407cf2f7d11d24f4a9cdb92214d24e9d1e9cd9d1b904642d2cebb0fa4b0369_0", "is_ignored": false, "lines": "app.use(session({\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: true\n}))", "message": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-522: Insufficiently Protected Credentials"], "cwe2021-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "nJUz4X", "url": "https://semgrep.dev/playground/r/ExTnNb/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path", "version_id": "ExTnNb"}}, "shortlink": "https://sg.run/b7pd", "source": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path", "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {"$SESSION": {"abstract_content": "session", "end": {"col": 16, "line": 8, "offset": 229}, "start": {"col": 9, "line": 8, "offset": 222}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "backend/app.js", "start": {"col": 9, "line": 8, "offset": 222}}, {"check_id": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure", "end": {"col": 3, "line": 12, "offset": 315}, "extra": {"engine_kind": "OSS", "fingerprint": "0928fc34d23af5b73e2218a4140be91b45db2f413203708cbadf269467034cdfb663089fd0b781a7c73a6e9f65dad1e8710b87458d5b19927239066b8ee13567_0", "is_ignored": false, "lines": "app.use(session({\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: true\n}))", "message": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-522: Insufficiently Protected Credentials"], "cwe2021-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "v8Unzw", "url": "https://semgrep.dev/playground/r/d6TDAp/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure", "version_id": "d6TDAp"}}, "shortlink": "https://sg.run/9oKz", "source": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure", "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {"$SESSION": {"abstract_content": "session", "end": {"col": 16, "line": 8, "offset": 229}, "start": {"col": 9, "line": 8, "offset": 222}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "backend/app.js", "start": {"col": 9, "line": 8, "offset": 222}}, {"check_id": "javascript.express.security.audit.remote-property-injection.remote-property-injection", "end": {"col": 28, "line": 25, "offset": 860}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "code", "location": {"end": {"col": 13, "line": 23, "offset": 781}, "path": "backend/controllers/hostedLoginController.js", "start": {"col": 9, "line": 23, "offset": 777}}}], "taint_sink": ["CliLoc", [{"end": {"col": 28, "line": 25, "offset": 860}, "path": "backend/controllers/hostedLoginController.js", "start": {"col": 3, "line": 25, "offset": 835}}, "idToAuthCode[uuid] = code"]], "taint_source": ["CliLoc", [{"end": {"col": 25, "line": 23, "offset": 793}, "path": "backend/controllers/hostedLoginController.js", "start": {"col": 16, "line": 23, "offset": 784}}, "req.query"]]}, "engine_kind": "OSS", "fingerprint": "fcfb04065fb0aaa5626b3710659a5af30fedfb09320b71b1d02a7c02a520aab472f08055dc6f8c6dfdf4528dd324110f885328c13d6e0ef0fe0d31b0952e5155_0", "is_ignored": false, "lines": "  idToAuthCode[uuid] = code;", "message": "Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-522: Insufficiently Protected Credentials"], "cwe2021-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "references": ["https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "JDUL1B", "url": "https://semgrep.dev/playground/r/BjTErZ/javascript.express.security.audit.remote-property-injection.remote-property-injection", "version_id": "BjTErZ"}}, "shortlink": "https://sg.run/Z4gn", "source": "https://semgrep.dev/r/javascript.express.security.audit.remote-property-injection.remote-property-injection", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {"$INDEX": {"abstract_content": "idToAuthCode[uuid]=code", "end": {"col": 28, "line": 25, "offset": 860}, "start": {"col": 3, "line": 25, "offset": 835}}, "$NEXT": {"abstract_content": "next", "end": {"col": 47, "line": 22, "offset": 765}, "start": {"col": 43, "line": 22, "offset": 761}}, "$OBJ": {"abstract_content": "idToAuthCode", "end": {"col": 15, "line": 25, "offset": 847}, "start": {"col": 3, "line": 25, "offset": 835}}, "$REQ": {"abstract_content": "req", "end": {"col": 19, "line": 23, "offset": 787}, "start": {"col": 16, "line": 23, "offset": 784}}, "$RES": {"abstract_content": "res", "end": {"col": 41, "line": 22, "offset": 759}, "start": {"col": 38, "line": 22, "offset": 756}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "backend/controllers/hostedLoginController.js", "start": {"col": 3, "line": 25, "offset": 835}}, {"check_id": "javascript.express.security.audit.xss.direct-response-write.direct-response-write", "end": {"col": 38, "line": 29, "offset": 1020}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "code", "location": {"end": {"col": 13, "line": 23, "offset": 781}, "path": "backend/controllers/hostedLoginController.js", "start": {"col": 9, "line": 23, "offset": 777}}}], "taint_sink": ["CliLoc", [{"end": {"col": 38, "line": 29, "offset": 1020}, "path": "backend/controllers/hostedLoginController.js", "start": {"col": 12, "line": 29, "offset": 994}}, "{codeVerifier, code, uuid}"]], "taint_source": ["CliLoc", [{"end": {"col": 25, "line": 23, "offset": 793}, "path": "backend/controllers/hostedLoginController.js", "start": {"col": 16, "line": 23, "offset": 784}}, "req.query"]]}, "engine_kind": "OSS", "fingerprint": "7d80b322a0f971148c6172b3e1a67080043efdfe6722464d7d019a4d03517cd5fc8fc6f766b02215f648cbde59368226385162c7e1056d2d9c02c983289378cd_0", "is_ignored": false, "lines": "  res.send({codeVerifier, code, uuid});", "message": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "3qUPA1", "url": "https://semgrep.dev/playground/r/nWTxGJk/javascript.express.security.audit.xss.direct-response-write.direct-response-write", "version_id": "nWTxGJk"}}, "shortlink": "https://sg.run/vzGl", "source": "https://semgrep.dev/r/javascript.express.security.audit.xss.direct-response-write.direct-response-write", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$ARG": {"abstract_content": "{codeVerifier codeVerifier code code uuid uuid}", "end": {"col": 38, "line": 29, "offset": 1020}, "start": {"col": 12, "line": 29, "offset": 994}}, "$NEXT": {"abstract_content": "next", "end": {"col": 47, "line": 22, "offset": 765}, "start": {"col": 43, "line": 22, "offset": 761}}, "$REQ": {"abstract_content": "req", "end": {"col": 19, "line": 23, "offset": 787}, "start": {"col": 16, "line": 23, "offset": 784}}, "$RES": {"abstract_content": "res", "end": {"col": 41, "line": 22, "offset": 759}, "start": {"col": 38, "line": 22, "offset": 756}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "backend/controllers/hostedLoginController.js", "start": {"col": 12, "line": 29, "offset": 994}}], "skipped_rules": [], "version": "1.43.0"}